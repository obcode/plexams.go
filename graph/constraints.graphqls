extend type Mutation {
  notPlannedByMe(ancode: Int!): Boolean!
  excludeDays(ancode: Int!, days: [String!]!): Boolean!
  possibleDays(ancode: Int!, days: [String!]!): Boolean!
  sameSlot(ancode: Int!, ancodes: [Int!]!): Boolean!
  placesWithSockets(ancode: Int!): Boolean!
  lab(ancode: Int!): Boolean!
  exahm(ancode: Int!): Boolean!
  seb(ancode: Int!): Boolean!
  online(ancode: Int!): Boolean!

  addConstraints(ancode: Int!, constraints: ConstraintsInput!): Constraints!
  rmConstraints(ancode: Int!): Boolean!
}

type Constraints {
  ancode: Int!
  notPlannedByMe: Boolean!
  excludeDays: [Time!]
  possibleDays: [Time!]
  fixedDay: Time
  fixedTime: Time
  sameSlot: [Int!]
  online: Boolean!
  roomConstraints: RoomConstraints
}

type RoomConstraints {
  allowedRooms: [String!]
  placesWithSocket: Boolean!
  lab: Boolean!
  exahm: Boolean!
  seb: Boolean!
  kdpJiraURL: String
  maxStudents: Int
  comments: String
}

input ConstraintsInput {
  allowedRooms: [String!]
  notPlannedByMe: Boolean
  excludeDays: [Time!]
  possibleDays: [Time!]
  fixedDay: Time
  fixedTime: Time
  sameSlot: [Int!]
  online: Boolean
  placesWithSocket: Boolean
  lab: Boolean
  exahm: Boolean
  seb: Boolean
  kdpJiraURL: String
  maxStudents: Int
  comments: String
}
