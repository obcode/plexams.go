package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.70

import (
	"context"

	"github.com/obcode/plexams.go/graph/model"
)

// NotPlannedByMe is the resolver for the notPlannedByMe field.
func (r *mutationResolver) NotPlannedByMe(ctx context.Context, ancode int) (bool, error) {
	return r.plexams.NotPlannedByMe(ctx, ancode)
}

// ExcludeDays is the resolver for the excludeDays field.
func (r *mutationResolver) ExcludeDays(ctx context.Context, ancode int, days []string) (bool, error) {
	return r.plexams.ExcludeDays(ctx, ancode, days)
}

// PossibleDays is the resolver for the possibleDays field.
func (r *mutationResolver) PossibleDays(ctx context.Context, ancode int, days []string) (bool, error) {
	return r.plexams.PossibleDays(ctx, ancode, days)
}

// SameSlot is the resolver for the sameSlot field.
func (r *mutationResolver) SameSlot(ctx context.Context, ancode int, ancodes []int) (bool, error) {
	return r.plexams.SameSlot(ctx, ancode, ancodes)
}

// RoomWithSockets is the resolver for the roomWithSockets field.
func (r *mutationResolver) PlacesWithSockets(ctx context.Context, ancode int) (bool, error) {
	return r.plexams.PlacesWithSockets(ctx, ancode)
}

// Lab is the resolver for the lab field.
func (r *mutationResolver) Lab(ctx context.Context, ancode int) (bool, error) {
	return r.plexams.Lab(ctx, ancode)
}

// Exahm is the resolver for the exahm field.
func (r *mutationResolver) Exahm(ctx context.Context, ancode int) (bool, error) {
	return r.plexams.Exahm(ctx, ancode)
}

// Seb is the resolver for the seb field.
func (r *mutationResolver) Seb(ctx context.Context, ancode int) (bool, error) {
	return r.plexams.SafeExamBrowser(ctx, ancode)
}

// Online is the resolver for the online field.
func (r *mutationResolver) Online(ctx context.Context, ancode int) (bool, error) {
	return r.plexams.Online(ctx, ancode)
}

// AddConstraints is the resolver for the addConstraints field.
func (r *mutationResolver) AddConstraints(ctx context.Context, ancode int, constraints model.ConstraintsInput) (*model.Constraints, error) {
	return r.plexams.AddConstraints(ctx, ancode, constraints)
}

// RmConstraints is the resolver for the rmConstraints field.
func (r *mutationResolver) RmConstraints(ctx context.Context, ancode int) (bool, error) {
	return r.plexams.RmConstraints(ctx, ancode)
}
