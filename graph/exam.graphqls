extend type Query {
  connectedExam(ancode: Int!): ConnectedExam
  connectedExams: [ConnectedExam!]!

  generatedExams: [GeneratedExam!]!
  generatedExam(ancode: Int!): GeneratedExam

  plannedExams: [PlannedExam!]!
  plannedExam(ancode: Int!): PlannedExam

  mucdaiExams: [MucDaiExam!]!

  conflictingAncodes(ancode: Int!): [Conflict!]
}

type ExamWithRegsAndRooms {
  exam: PlannedExam!
  normalRegsMtknr: [String!]!
  ntasInNormalRooms: [NTA!]!
  ntasInAloneRooms: [NTA!]!
  rooms: [PlannedRoom!]!
}

type ConnectedExam {
  zpaExam: ZPAExam!
  primussExams: [PrimussExam!]!
  otherPrimussExams: [PrimussExam!]!
  errors: [String!]!
}

type GeneratedExam {
  ancode: Int!
  zpaExam: ZPAExam!
  mainExamer: Teacher!
  primussExams: [EnhancedPrimussExam!]!
  constraints: Constraints
  conflicts: [ZPAConflict!]!
  studentRegsCount: Int!
  ntas: [NTA!]!
  maxDuration: Int!
}

type ZPAConflict {
  ancode: Int!
  numberOfStuds: Int!
  primussAncodes: [PrimussExamAncode!]!
}

type PlannedExam {
  ancode: Int!
  zpaExam: ZPAExam!
  mainExamer: Teacher!
  primussExams: [EnhancedPrimussExam!]!
  constraints: Constraints
  conflicts: [ZPAConflict!]!
  studentRegsCount: Int!
  ntas: [NTA!]!
  maxDuration: Int!
  planEntry: PlanEntry
  plannedRooms: [PlannedRoom!]
}

type MucDaiExam {
  primussAncode: Int!
  module: String!
  mainExamer: String!
  mainExamerID: Int
  examType: String!
  duration: Int!
  isRepeaterExam: Boolean!
  program: String!
  plannedBy: String!
}
