extend type Query {
  connectedExam(ancode: Int!): ConnectedExam
  connectedExams: [ConnectedExam!]!

  externalExams: [ExternalExam!]!

  mucdaiExams: [MucDaiExam!]!

  generatedExams: [GeneratedExam!]!
  generatedExam(ancode: Int!): GeneratedExam

  plannedExams: [PlannedExam!]!
  plannedExam(ancode: Int!): PlannedExam

  conflictingAncodes(ancode: Int!): [Conflict!]

  exam(ancode: Int!): Exam
  exams: [Exam!]!
}

# Deprecated: remove me
input AdditionalExamInput {
  ancode: Int!
  module: String!
  mainExamerID: Int!
  duration: Int!
  isRepeaterExam: Boolean!
  groups: [String!]!
}

# Deprecated: remove me
type AdditionalExam {
  ancode: Int!
  module: String!
  mainExamer: String!
  mainExamerID: Int!
  duration: Int!
  isRepeaterExam: Boolean!
  groups: [String!]!
}

# Deprecated: remove me
type ExamWithRegs {
  ancode: Int!
  zpaExam: ZPAExam!
  primussExams: [PrimussExam!]!
  studentRegs: [StudentRegsPerAncodeAndProgram!]!
  conflicts: [ConflictPerProgram!]!
  connectErrors: [String!]!
}

type Constraints {
  ancode: Int!
  notPlannedByMe: Boolean!
  excludeDays: [Time!]
  possibleDays: [Time!]
  fixedDay: Time
  fixedTime: Time
  sameSlot: [Int!]
  online: Boolean!
  roomConstraints: RoomConstraints
}

type RoomConstraints {
  placesWithSocket: Boolean!
  lab: Boolean!
  exahmRooms: Boolean!
  seb: Boolean!
}

# Deprecated: remove me
type ExamToPlan {
  exam: ExamWithRegs!
  constraints: Constraints
}

# Deprecated: remove me
type PlannedExamWithNTA {
  exam: ExamWithRegs!
  constraints: Constraints
  nta: [NTAWithRegs!]
}

# Deprecated: remove me
type ExamInPlan {
  exam: ExamWithRegs!
  constraints: Constraints
  nta: [NTAWithRegs!]
  slot: Slot
}

type ExamWithRegsAndRooms {
  exam: PlannedExam!
  normalRegsMtknr: [String!]!
  ntas: [NTA!]!
  rooms: [PlannedRoom!]!
}

type ExternalExam {
  ancode: Int!
  program: String!
  module: String!
  mainExamer: String!
  duration: Int!
}

type MucDaiExam {
  primussAncode: Int!
  module: String!
  mainExamer: String!
  mainExamerID: Int
  examType: String!
  duration: Int!
  isRepeaterExam: Boolean!
  program: String!
  plannedBy: String!
}

type ConnectedExam {
  zpaExam: ZPAExam!
  primussExams: [PrimussExam!]!
  otherPrimussExams: [PrimussExam!]!
  errors: [String!]!
}

type GeneratedExam {
  ancode: Int!
  zpaExam: ZPAExam!
  mainExamer: Teacher!
  primussExams: [EnhancedPrimussExam!]!
  constraints: Constraints
  conflicts: [ZPAConflict!]!
  studentRegsCount: Int!
  ntas: [NTA!]!
  maxDuration: Int!
}

type ZPAConflict {
  ancode: Int!
  numberOfStuds: Int!
  primussAncodes: [PrimussExamAncode!]!
}

type PlannedExam {
  ancode: Int!
  zpaExam: ZPAExam!
  mainExamer: Teacher!
  primussExams: [EnhancedPrimussExam!]!
  constraints: Constraints
  conflicts: [ZPAConflict!]!
  studentRegsCount: Int!
  ntas: [NTA!]!
  maxDuration: Int!
  planEntry: PlanEntry
  plannedRooms: [PlannedRoom!]
}

type Exam {
  ancode: Int!
  zpaExam: ZPAExam
  externalExam: ExternalExam
  primussExams: [PrimussExam!]!
  studentRegs: [StudentRegsPerAncodeAndProgram!]!
  conflicts: [ConflictsPerProgramAncode!]!
  connectErrors: [String!]!
  constraints: Constraints
  regularStudents: [Student!]
  ntaStudents: [Student!]
  slot: Slot
  rooms: [RoomForExam!]
}
