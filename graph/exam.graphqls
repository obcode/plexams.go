extend type Query {
  exams: [Exam!]!
  exam(ancode: Int!): Exam
}

# Deprecated: remove me
input AdditionalExamInput {
  ancode: Int!
  module: String!
  mainExamerID: Int!
  duration: Int!
  isRepeaterExam: Boolean!
  groups: [String!]!
}

# Deprecated: remove me
type AdditionalExam {
  ancode: Int!
  module: String!
  mainExamer: String!
  mainExamerID: Int!
  duration: Int!
  isRepeaterExam: Boolean!
  groups: [String!]!
}

# Deprecated: remove me
type ExamWithRegs {
  ancode: Int!
  zpaExam: ZPAExam!
  primussExams: [PrimussExam!]!
  studentRegs: [StudentRegsPerAncodeAndProgram!]!
  conflicts: [ConflictPerProgram!]!
  connectErrors: [String!]!
}

type Constraints {
  ancode: Int!
  notPlannedByMe: Boolean!
  excludeDays: [Time!]
  possibleDays: [Time!]
  fixedDay: Time
  fixedTime: Time
  sameSlot: [Int!]
  online: Boolean!
  roomConstraints: RoomConstraints
}

type RoomConstraints {
  placesWithSocket: Boolean!
  lab: Boolean!
  exahmRooms: Boolean!
  seb: Boolean!
}

# Deprecated: remove me
type ExamToPlan {
  exam: ExamWithRegs!
  constraints: Constraints
}

# Deprecated: remove me
type PlannedExamWithNTA {
  exam: ExamWithRegs!
  constraints: Constraints
  nta: [NTAWithRegs!]
}

# Deprecated: remove me
type ExamInPlan {
  exam: ExamWithRegs!
  constraints: Constraints
  nta: [NTAWithRegs!]
  slot: Slot
}

# Deprecated: remove me
type ExamWithRegsAndRooms {
  exam: ExamInPlan!
  normalRegs: [StudentReg!]!
  ntaRegs: [NTAWithRegs!]!
  rooms: [RoomForExam!]!
}

type ExternalExam {
  ancode: Int!
  program: String!
}

type Exam {
  ancode: Int!
  zpaExam: ZPAExam
  externalExam: ExternalExam
  primussExams: [PrimussExam!]!
  studentRegs: [StudentRegsPerAncodeAndProgram!]!
  conflicts: [ConflictPerProgram!]!
  connectErrors: [String!]!
  constraints: Constraints
  nta: [NTAWithRegs!]
  slot: Slot
  rooms: [RoomForExam!]
}
