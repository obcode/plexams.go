package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"fmt"

	"github.com/obcode/plexams.go/graph/generated"
	"github.com/obcode/plexams.go/graph/model"
)

// MainExamer is the resolver for the mainExamer field.
func (r *generatedExamResolver) MainExamer(ctx context.Context, obj *model.GeneratedExam) (*model.Teacher, error) {
	return r.plexams.GetTeacher(ctx, obj.ZpaExam.MainExamerID)
}

// MainExamer is the resolver for the mainExamer field.
func (r *plannedExamResolver) MainExamer(ctx context.Context, obj *model.PlannedExam) (*model.Teacher, error) {
	return r.plexams.GetTeacher(ctx, obj.ZpaExam.MainExamerID)
}

// ConnectedExam is the resolver for the connectedExam field.
func (r *queryResolver) ConnectedExam(ctx context.Context, ancode int) (*model.ConnectedExam, error) {
	return r.plexams.GetConnectedExam(ctx, ancode)
}

// ConnectedExams is the resolver for the connectedExams field.
func (r *queryResolver) ConnectedExams(ctx context.Context) ([]*model.ConnectedExam, error) {
	return r.plexams.GetConnectedExams(ctx)
}

// ExternalExams is the resolver for the externalExams field.
func (r *queryResolver) ExternalExams(ctx context.Context) ([]*model.ExternalExam, error) {
	return r.plexams.ExternalExams(ctx)
}

// MucdaiExams is the resolver for the mucdaiExams field.
func (r *queryResolver) MucdaiExams(ctx context.Context) ([]*model.MucDaiExam, error) {
	return r.plexams.MucdaiExams(ctx)
}

// GeneratedExams is the resolver for the generatedExams field.
func (r *queryResolver) GeneratedExams(ctx context.Context) ([]*model.GeneratedExam, error) {
	return r.plexams.GeneratedExams(ctx)
}

// GeneratedExam is the resolver for the generatedExam field.
func (r *queryResolver) GeneratedExam(ctx context.Context, ancode int) (*model.GeneratedExam, error) {
	return r.plexams.GeneratedExam(ctx, ancode)
}

// PlannedExams is the resolver for the plannedExams field.
func (r *queryResolver) PlannedExams(ctx context.Context) ([]*model.PlannedExam, error) {
	return r.plexams.PlannedExams(ctx)
}

// PlannedExam is the resolver for the plannedExam field.
func (r *queryResolver) PlannedExam(ctx context.Context, ancode int) (*model.PlannedExam, error) {
	return r.plexams.PlannedExam(ctx, ancode)
}

// ConflictingAncodes is the resolver for the conflictingAncodes field.
func (r *queryResolver) ConflictingAncodes(ctx context.Context, ancode int) ([]*model.Conflict, error) {
	return r.plexams.ConflictingAncodes(ctx, ancode)
}

// Exam is the resolver for the exam field.
func (r *queryResolver) Exam(ctx context.Context, ancode int) (*model.Exam, error) {
	exam, err := r.plexams.CachedExam(ctx, ancode)
	if err != nil || exam == nil {
		return r.plexams.Exam(ctx, ancode)
	}
	return exam, err
}

// Exams is the resolver for the exams field.
func (r *queryResolver) Exams(ctx context.Context) ([]*model.Exam, error) {
	return r.plexams.CachedExams(ctx)
}

// GeneratedExam returns generated.GeneratedExamResolver implementation.
func (r *Resolver) GeneratedExam() generated.GeneratedExamResolver { return &generatedExamResolver{r} }

// PlannedExam returns generated.PlannedExamResolver implementation.
func (r *Resolver) PlannedExam() generated.PlannedExamResolver { return &plannedExamResolver{r} }

type generatedExamResolver struct{ *Resolver }
type plannedExamResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
func (r *plannedExamResolver) PlanEntry(ctx context.Context, obj *model.PlannedExam) (*model.PlanEntry, error) {
	panic(fmt.Errorf("not implemented: PlanEntry - planEntry"))
}
func (r *plannedExamResolver) PlannedRooms(ctx context.Context, obj *model.PlannedExam) ([]*model.PlannedRoom, error) {
	panic(fmt.Errorf("not implemented: PlannedRooms - plannedRooms"))
}
