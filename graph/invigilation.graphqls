type Invigilation {
  roomName: String
  duration: Int!
  invigilatorID: Int!
  slot: Slot!
  isReserve: Boolean!
  isSelfInvigilation: Boolean!
}

type InvigilationTodos {
  sumExamRooms: Int! # without self invigilations
  sumReserve: Int!
  sumOtherContributions: Int!
  sumOtherContributionsOvertimeCutted: Int!
  invigilatorCount: Int!
  todoPerInvigilator: Int!
  todoPerInvigilatorOvertimeCutted: Int!
  invigilators: [Invigilator!]!
}

type InvigilationSlot {
  reserve: Teacher
  roomsWithInvigilators: [RoomWithInvigilator!]!
}

type InvigilatorsForDay {
  want: [Invigilator!]!
  can: [Invigilator!]!
}

type ZPAInvigilator {
  teacher: Teacher!
  hasSubmittedRequirements: Boolean!
}

type Invigilator {
  teacher: Teacher!
  requirements: InvigilatorRequirements
  todos: InvigilatorTodos
}

type InvigilatorRequirements {
  excludedDates: [Time!]!
  excludedDays: [Int!]!
  examDateTimes: [Time!]!
  examDays: [Int!]!
  partTime: Float!
  oralExamsContribution: Int!
  liveCodingContribution: Int!
  masterContribution: Int!
  freeSemester: Float!
  overtimeLastSemester: Float!
  overtimeThisSemester: Float!
  allContributions: Int!
  factor: Float!
}

type InvigilatorTodos {
  totalMinutes: Int!
  doingMinutes: Int!
  enough: Boolean!
  invigilationDays: [Int!]
  invigilations: [Invigilation!]
}

type RoomWithInvigilator {
  name: String!
  maxDuration: Int!
  studentCount: Int!
  roomAndExams: [RoomAndExam!]!
  invigilator: Teacher
}
