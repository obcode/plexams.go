package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.70

import (
	"context"

	"github.com/obcode/plexams.go/graph/generated"
	"github.com/obcode/plexams.go/graph/model"
)

// SetSemester is the resolver for the setSemester field.
func (r *mutationResolver) SetSemester(ctx context.Context, input string) (*model.Semester, error) {
	return r.plexams.SetSemester(ctx, input)
}

// ZpaExamsToPlan is the resolver for the zpaExamsToPlan field.
func (r *mutationResolver) ZpaExamsToPlan(ctx context.Context, input []int) ([]*model.ZPAExam, error) {
	return r.plexams.ZpaExamsToPlan(ctx, input)
}

// AddZPAExamToPlan is the resolver for the addZPAExamToPlan field.
func (r *mutationResolver) AddZpaExamToPlan(ctx context.Context, ancode int) (bool, error) {
	return r.plexams.AddZpaExamToPlan(ctx, ancode)
}

// RmZPAExamFromPlan is the resolver for the rmZPAExamFromPlan field.
func (r *mutationResolver) RmZpaExamFromPlan(ctx context.Context, ancode int) (bool, error) {
	return r.plexams.RmZpaExamFromPlan(ctx, ancode)
}

// AddAdditionalExam is the resolver for the addAdditionalExam field.
func (r *mutationResolver) AddAdditionalExam(ctx context.Context, exam model.AdditionalExamInput) (bool, error) {
	return r.plexams.AddAdditionalExam(ctx, exam)
}

// RemovePrimussExam is the resolver for the removePrimussExam field.
func (r *mutationResolver) RemovePrimussExam(ctx context.Context, input *model.PrimussExamInput) (bool, error) {
	return r.plexams.RemovePrimussExam(ctx, input)
}

// AddNta is the resolver for the addNTA field.
func (r *mutationResolver) AddNta(ctx context.Context, input model.NTAInput) (*model.NTA, error) {
	return r.plexams.AddNta(ctx, input)
}

// AddExamGroupToSlot is the resolver for the addExamGroupToSlot field.
func (r *mutationResolver) AddExamGroupToSlot(ctx context.Context, day int, time int, examGroupCode int) (bool, error) {
	return r.plexams.AddExamGroupToSlot(ctx, day, time, examGroupCode)
}

// RmExamGroupFromSlot is the resolver for the rmExamGroupFromSlot field.
func (r *mutationResolver) RmExamGroupFromSlot(ctx context.Context, examGroupCode int) (bool, error) {
	return r.plexams.RmExamGroupFromSlot(ctx, examGroupCode)
}

// AddRoomToExam is the resolver for the addRoomToExam field.
func (r *mutationResolver) AddRoomToExam(ctx context.Context, input model.RoomForExamInput) (bool, error) {
	return r.plexams.AddRoomToExam(ctx, input)
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
