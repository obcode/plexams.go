extend type Query {
  ntas: [NTA!]
  ntasWithRegs: [Student!]
  nta(mtknr: String!): NTAWithRegs
}

extend type Mutation {
  addNTA(input: NTAInput!): NTA!
}

type NTAExam {
  semester: String!
  ancode: String!
  module: String!
  mainExamer: String!
}

type NTA {
  name: String!
  email: String
  mtknr: String!
  compensation: String!
  deltaDurationPercent: Int!
  needsRoomAlone: Boolean!
  needsHardware: Boolean!
  program: String!
  from: String!
  until: String!
  lastSemester: String
  exams: [NTAExam!]!
  deactivated: Boolean!
}

input NTAInput {
  name: String!
  email: String
  mtknr: String!
  compensation: String!
  deltaDurationPercent: Int!
  needsRoomAlone: Boolean!
  needsHardware: Boolean!
  program: String!
  from: String!
  until: String!
}

type NTAWithRegs {
  nta: NTA!
  regs: StudentRegsPerStudent
}

type NTAWithRegsByExamAndTeacher {
  teacher: Teacher!
  exams: [NTAWithRegsByExam!]
}

type NTAWithRegsByExam {
  exam: ZPAExam!
  ntas: [NTAWithRegs!]
}
