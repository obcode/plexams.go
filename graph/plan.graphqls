extend type Query {
  allProgramsInPlan: [String!]
  ancodesInPlan: [Int!]
  examerInPlan: [ExamerInPlan!]

  preExamsInSlot(day: Int!, time: Int!): [PreExam!]

  examsInSlot(day: Int!, time: Int!): [PlannedExam!]
  examsWithoutSlot: [PlannedExam!]!

  allowedSlots(ancode: Int!): [Slot!]
  awkwardSlots(ancode: Int!): [Slot!]! # slots before or after a conflict
}

extend type Mutation {
  addExamToSlot(day: Int!, time: Int!, ancode: Int!): Boolean!
  rmExamFromSlot(ancode: Int!): Boolean!
}

type Emails {
  profs: String!
  lbas: String!
  fs: String!
  sekr: String!
}

type ExamDay {
  number: Int!
  date: Time!
}

type Starttime {
  number: Int!
  start: String!
}

type Slot {
  dayNumber: Int!
  slotNumber: Int!
  starttime: Time!
}

type ExamerInPlan {
  mainExamer: String!
  mainExamerID: Int!
}

type PreExam {
  zpaExam: ZPAExam!
  constraints: Constraints
  planEntry: PlanEntry
}

type PlanEntry {
  dayNumber: Int!
  slotNumber: Int!
  starttime: Time!
  ancode: Int!
  locked: Boolean!
}
