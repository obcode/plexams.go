extend type Query {
  allProgramsInPlan: [String!]
  ancodesInPlan: [Int!]
  examerInPlan: [ExamerInPlan!]

  preExamsInSlot(day: Int!, time: Int!): [PreExam!]

  examsInSlot(day: Int!, time: Int!): [PlannedExam!]
  examsWithoutSlot: [PlannedExam!]!

  allowedSlots(ancode: Int!): [Slot!]
  awkwardSlots(ancode: Int!): [Slot!]! # slots before or after a conflict
}

extend type Mutation {
  addExamToSlot(day: Int!, time: Int!, ancode: Int!): Boolean!
  rmExamFromSlot(ancode: Int!): Boolean!
}

type Emails {
  profs: String!
  lbas: String!
  fs: String!
}

type SemesterConfig {
  days: [ExamDay!]!
  starttimes: [Starttime!]!
  slots: [Slot!]!
  goSlotsRaw: [[Int!]!]
  goSlots: [Slot!]!
  goDay0: Time!
  forbiddenSlots: [Slot!]
  from: Time!
  fromFK07: Time!
  until: Time!
  emails: Emails!
}

type ExamDay {
  number: Int!
  date: Time!
}

type Starttime {
  number: Int!
  start: String!
}

type Slot {
  dayNumber: Int!
  slotNumber: Int!
  starttime: Time!
}

type ExamGroup {
  examGroupCode: Int!
  exams: [ExamToPlan!]!
  examGroupInfo: ExamGroupInfo
}

type ExamGroupInfo {
  notPlannedByMe: Boolean!
  excludeDays: [Int!]
  possibleDays: [Int!]
  fixedDay: Int
  fixedSlot: Slot
  possibleSlots: [Slot!]
  conflicts: [ExamGroupConflict]
  studentRegs: Int!
  programs: [String!]!
  maxDuration: Int!
  maxDurationNTA: Int
}

type ExamGroupConflict {
  examGroupCode: Int!
  count: Int!
}

type Plan {
  semesterConfig: SemesterConfig
  slots: [SlotWithExamGroups]
}

type SlotWithExamGroups {
  dayNumber: Int!
  slotNumber: Int!
  examGroups: [ExamGroup]
}

type ExamerInPlan {
  mainExamer: String!
  mainExamerID: Int!
}

type PreExam {
  zpaExam: ZPAExam!
  constraints: Constraints
  planEntry: PlanEntry
}

# TODO: remove starttime!!!
type PlanEntry {
  dayNumber: Int!
  slotNumber: Int!
  starttime: Time!
  ancode: Int!
  locked: Boolean!
}
