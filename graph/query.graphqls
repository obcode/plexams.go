type Query {
  workflow: [Step!]!
  nextDeadline: Step
  allSemesterNames: [Semester!]!
  semester: Semester!
  semesterConfig: SemesterConfig!
  # ZPA
  teacher(id: Int!): Teacher
  teachers(fromZPA: Boolean): [Teacher!]!
  invigilators: [Teacher!]!
  fk07programs: [FK07Program!]!
  zpaExams(fromZPA: Boolean): [ZPAExam!]!
  zpaExamsByType: [ZPAExamsForType!]!
  zpaExamsToPlan: [ZPAExam!]!
  zpaExamsNotToPlan: [ZPAExam!]!
  zpaExamsPlaningStatusUnknown: [ZPAExam!]!
  zpaExam(ancode: Int!): ZPAExam
  zpaAnCodes: [AnCode]
  studentRegsImportErrors: [RegWithError!]!
  # Additional Exams
  additionalExams: [AdditionalExam!]!
  # Primuss
  primussExams: [PrimussExamByProgram]
  primussExam(program: String!, ancode: Int!): PrimussExam!
  primussExamsForAnCode(ancode: Int!): [PrimussExam!]
  studentRegsForProgram(program: String!): [StudentReg!]
  # Exams connected
  connectedExam(ancode: Int!): ConnectedExam
  connectedExams: [ConnectedExam!]!
  # exam with regs
  examWithRegs(ancode: Int!): ExamWithRegs
  examsWithRegs: [ExamWithRegs!]
  # constraints
  constraintForAncode(ancode: Int!): Constraints
  zpaExamsToPlanWithConstraints: [ZPAExamWithConstraints!]!
  # exam groups
  examGroups: [ExamGroup!]!
  examGroup(examGroupCode: Int!): ExamGroup
  conflictingGroupCodes(examGroupCode: Int!): [ExamGroupConflict!]
  # NTAs
  ntas: [NTA!]
  ntasWithRegs: [NTAWithRegs!]
  ntasWithRegsByTeacher: [NTAWithRegsByExamAndTeacher!]
  nta(mtknr: String!): NTAWithRegs
  # Plan
  allowedSlots(examGroupCode: Int!): [Slot!]
  awkwardSlots(examGroupCode: Int!): [Slot!]! # slots before or after a conflict
  examGroupsInSlot(day: Int!, time: Int!): [ExamGroup!]
  examGroupsWithoutSlot: [ExamGroup!]
  allProgramsInPlan: [String!]
  ancodesInPlan: [Int!]
  examerInPlan: [ExamerInPlan!]
}
