type Query {
  workflow: [Step!]!
  nextDeadline: Step
  allSemesterNames: [Semester!]!
  semester: Semester!
  semesterConfig: SemesterConfig!
  # Additional Exams
  additionalExams: [AdditionalExam!]!
  # Primuss
  primussExams: [PrimussExamByProgram]
  primussExam(program: String!, ancode: Int!): PrimussExam!
  primussExamsForAnCode(ancode: Int!): [PrimussExam!]
  studentRegsForProgram(program: String!): [StudentReg!]

  # exam with regs
  examWithRegs(ancode: Int!): ExamWithRegs
  examsWithRegs: [ExamWithRegs!]
  # constraints
  constraintForAncode(ancode: Int!): Constraints
  zpaExamsToPlanWithConstraints: [ZPAExamWithConstraints!]!
  # exam groups
  examGroups: [ExamGroup!]!
  examGroup(examGroupCode: Int!): ExamGroup
  conflictingGroupCodes(examGroupCode: Int!): [ExamGroupConflict!]
  # NTAs
  ntas: [NTA!]
  ntasWithRegs: [NTAWithRegs!]
  ntasWithRegsByTeacher: [NTAWithRegsByExamAndTeacher!]
  nta(mtknr: String!): NTAWithRegs
  # Plan
  allowedSlots(examGroupCode: Int!): [Slot!]
  awkwardSlots(examGroupCode: Int!): [Slot!]! # slots before or after a conflict
  examGroupsInSlot(day: Int!, time: Int!): [ExamGroup!]
  examGroupsWithoutSlot: [ExamGroup!]
  allProgramsInPlan: [String!]
  ancodesInPlan: [Int!]
  examerInPlan: [ExamerInPlan!]
  # PlannedExamsWithNTA
  plannedExamsInSlot(day: Int!, time: Int!): [PlannedExamWithNTA!]
  examsInPlan: [ExamInPlan!]
  examsInSlot(day: Int!, time: Int!): [ExamInPlan!]
  # Rooms
  examsInSlotWithRooms(day: Int!, time: Int!): [ExamWithRegsAndRooms!]
  rooms: [Room!]!
  roomsWithConstraints(
    handicap: Boolean!
    lab: Boolean!
    placesWithSocket: Boolean!
    exahm: Boolean
  ): [Room!]!
  roomsForSlot(day: Int!, time: Int!): SlotWithRooms
  plannedRoomNames: [String!]
  plannedRoomNamesInSlot(day: Int!, time: Int!): [String!]
  # Invigilators
  invigilatorsWithReq: [Invigilator!]!
  invigilatorTodos: InvigilationTodos
  roomsWithInvigilationsForSlot(day: Int!, time: Int!): InvigilationSlot
  invigilatorsForDay(day: Int!): InvigilatorsForDay
  dayOkForInvigilator(day: Int!, invigilatorID: Int!): Boolean
}
