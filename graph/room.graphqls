extend type Query {
  rooms: [Room!]!
  roomsForSlots: [RoomsForSlot!]!
  plannedRoomNames: [String!]
  plannedRoomNamesInSlot(day: Int!, time: Int!): [String!]
  plannedRoomsInSlot(day: Int!, time: Int!): [PlannedRoom!]
  plannedRoomForStudent(ancode: Int!, mtknr: String!): PlannedRoom
}

type Room {
  name: String!
  seats: Int!
  handicap: Boolean!
  lab: Boolean!
  placesWithSocket: Boolean!
  needsRequest: Boolean!
  exahm: Boolean!
  seb: Boolean!
}

# type SlotWithRooms {
#   dayNumber: Int!
#   slotNumber: Int!
#   normalRooms: [Room!]!
#   exahmRooms: [Room!]!
#   labRooms: [Room!]!
#   ntaRooms: [Room!]!
# }

type RoomsForSlot {
  day: Int!
  slot: Int!
  rooms: [Room!]!
}

type PlannedRoom {
  day: Int!
  slot: Int!
  room: Room!
  ancode: Int!
  duration: Int!
  handicap: Boolean!
  handicapRoomAlone: Boolean!
  reserve: Boolean!
  studentsInRoom: [String!]!
  ntaMtknr: String
}

# type EnhancedPlannedRoom {
#   day: Int!
#   slot: Int!
#   roomName: String!
#   room: Room!
#   ancode: Int!
#   exam: GeneratedExam!
#   duration: Int!
#   handicap: Boolean!
#   handicapRoomAlone: Boolean!
#   reserve: Boolean!
#   studentsInRoom: [String!]!
#   ntaMtknr: String
#   ntaInRoom: NTA
# }

# Deprecated: rm me
type RoomForExam {
  ancode: Int!
  room: Room
  seatsPlanned: Int!
  duration: Int!
  handicap: Boolean!
  reserve: Boolean!
  students: [StudentReg!]!
}

# Deprecated: rm me
input RoomForExamInput {
  ancode: Int!
  day: Int!
  time: Int!
  roomName: String!
  seatsPlanned: Int!
  duration: Int!
  handicap: Boolean!
  mktnrs: [String!]
}

type RoomAndExam {
  room: PlannedRoom!
  exam: ZPAExam!
}
